#!/usr/bin/env python
import rospy
import numpy as np
import logging
import sys
import time
from demining_mqp.msg import*

from Adafruit_BNO055 import BNO055

class imuModule:
    def __init__(self):
        self.bno = BNO055.BNO055(serial_port='/dev/serial0')
        self.IMU_pub = rospy.Publisher('/IMU', IMUOrientation, queue_size=1)
        if len(sys.argv) == 2 and sys.argv[1].lower() == '-v':
            logging.basicConfig(level=logging.DEBUG)

        if not self.bno.begin():
            raise RuntimeError('Failed to initialize BNO055! Is the sensor connected?')

        # Print system status and self test result.
        status, self_test, error = self.bno.get_system_status()
        print('System status: {0}'.format(status))
        print('Self test result (0x0F is normal): 0x{0:02X}'.format(self_test))
        # Print out an error if system status is in error mode.
        if status == 0x01:
            print('System error: {0}'.format(error))
            print('See datasheet section 4.3.59 for the meaning.')

        # Print BNO055 software revision and other diagnostic data.
        sw, bl, accel, mag, gyro = self.bno.get_revision()
        print('Software version:   {0}'.format(sw))
        print('Bootloader version: {0}'.format(bl))
        print('Accelerometer ID:   0x{0:02X}'.format(accel))
        print('Magnetometer ID:    0x{0:02X}'.format(mag))
        print('Gyroscope ID:       0x{0:02X}\n'.format(gyro))

        print('Reading BNO055 data, press Ctrl-C to quit...')

    def sendData(self,heading,roll,pitch):
        IMU_msg.heading = heading
        IMU_msg.roll = roll
        IMU_msg.pitch = pitch
        self.IMU_pub(IMU_msg)





if __name__ == '__main__':
    rospy.init_node('IMU')
    imusensor = imuModule()
    rospy.sleep(1)
    then = rospy.Time.now()

    while not rospy.is_shutdown():
        # Read the Euler angles for heading, roll, pitch (all in degrees).
        heading, roll, pitch = imusensor.bno.read_euler()
		imusensor.sendData(heading,roll,pitch)
        # Read the calibration status, 0=uncalibrated and 3=fully calibrated.
        sys, gyro, accel, mag = imusensor.bno.get_calibration_status()
        # Print everything out.
        print(
        'Heading={0:0.2F} Roll={1:0.2F} Pitch={2:0.2F}\tSys_cal={3} Gyro_cal={4} Accel_cal={5} Mag_cal={6}'.format(
            heading, roll, pitch, sys, gyro, accel, mag))
        # Other values you can optionally read:
        # Orientation as a quaternion:
        # x,y,z,w = bno.read_quaterion()
        # Sensor temperature in degrees Celsius:
        # temp_c = bno.read_temp()
        # Magnetometer data (in micro-Teslas):
        # x,y,z = bno.read_magnetometer()
        # Gyroscope data (in degrees per second):
        # x,y,z = bno.read_gyroscope()
        # Accelerometer data (in meters per second squared):
        # x,y,z = bno.read_accelerometer()
        # Linear acceleration data (i.e. acceleration from movement, not gravity--
        # returned in meters per second squared):
        # x,y,z = bno.read_linear_acceleration()
        # Gravity acceleration data (i.e. acceleration just from gravity--returned
        # in meters per second squared):
        # x,y,z = bno.read_gravity()
        # Sleep for a second until the next reading.
        time.sleep(1)
